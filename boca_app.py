from flask import Flask, request, jsonify
import os
import logging
import requests
import time

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üî• VARI√ÅVEIS DE AMBIENTE (USE AS QUE VOC√ä J√Å TEM)
INSTAGRAM_ACCESS_TOKEN = os.getenv('PAGE_TOK...', '')
INSTAGRAM_BUSINESS_ACCOUNT_ID = os.getenv('USER_ACC...', '')

def extrair_categoria(data):
    """Extrai a categoria dos dados do WordPress"""
    try:
        taxonomies = data.get('taxonomies', {})
        categories = taxonomies.get('category', {})
        if categories:
            return list(categories.keys())[0].upper()
        return 'NOT√çCIAS'
    except:
        return 'NOT√çCIAS'

def publicar_no_instagram(titulo, imagem_url, categoria):
    """PUBLICA DIRETAMENTE NO INSTAGRAM - AGORA MESMO"""
    try:
        logger.info(f"üöÄ TENTANDO PUBLICAR: {titulo}")
        
        # URL da API do Instagram
        create_url = f"https://graph.facebook.com/v18.0/{INSTAGRAM_BUSINESS_ACCOUNT_ID}/media"
        
        # Dados para publica√ß√£o
        payload = {
            'image_url': imagem_url,
            'caption': f"üì¢ {titulo}\n\nüìç Categoria: {categoria}\n\nüîî Siga para mais not√≠cias!\n\n#Noticias #Brasil #LitoralNorte #Jornalismo",
            'access_token': INSTAGRAM_ACCESS_TOKEN
        }
        
        # 1. Criar m√≠dia
        response = requests.post(create_url, data=payload, timeout=30)
        result = response.json()
        
        logger.info(f"üì¶ Resposta da API: {result}")
        
        if 'id' in result:
            creation_id = result['id']
            logger.info(f"üì¶ M√≠dia criada: {creation_id}")
            
            # 2. Publicar a m√≠dia
            time.sleep(3)
            
            publish_url = f"https://graph.facebook.com/v18.0/{INSTAGRAM_BUSINESS_ACCOUNT_ID}/media_publish"
            publish_payload = {
                'creation_id': creation_id,
                'access_token': INSTAGRAM_ACCESS_TOKEN
            }
            
            publish_response = requests.post(publish_url, data=publish_payload, timeout=30)
            publish_result = publish_response.json()
            
            logger.info(f"üì¶ Resposta da publica√ß√£o: {publish_result}")
            
            if 'id' in publish_result:
                logger.info(f"‚úÖ PUBLICA√á√ÉO CONCLU√çDA! ID: {publish_result['id']}")
                return True
            else:
                logger.error(f"‚ùå Erro na publica√ß√£o: {publish_result}")
                return False
        else:
            logger.error(f"‚ùå Erro ao criar m√≠dia: {result}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro na publica√ß√£o: {str(e)}")
        return False

@app.route('/')
def index():
    return "‚úÖ Sistema Boca no Trombone - PUBLICA√á√ÉO DIRETA"

@app.route('/webhook-boca', methods=['POST'])
def webhook_boca():
    try:
        data = request.get_json()
        logger.info("üìç Webhook recebido do WordPress!")
        
        # Extrair dados
        post_data = data.get('post', {})
        titulo = post_data.get('post_title', 'T√≠tulo n√£o dispon√≠vel').strip()
        categoria = extrair_categoria(data)
        imagem_url = data.get('post_thumbnail', '').strip()
        
        # Log dos dados recebidos
        logger.info(f"üìù T√≠tulo: {titulo}")
        logger.info(f"üè∑Ô∏è Categoria: {categoria}")
        logger.info(f"üñºÔ∏è Imagem: {imagem_url}")
        
        # ‚úÖ PUBLICAR DIRETAMENTE - SEM FILA, SEM THREAD!
        if titulo and imagem_url.startswith('http'):
            logger.info("üî• PUBLICANDO DIRETAMENTE AGORA!")
            sucesso = publicar_no_instagram(titulo, imagem_url, categoria)
            
            if sucesso:
                logger.info("üéâ PUBLICA√á√ÉO REALIZADA COM SUCESSO!")
                return jsonify({'status': 'success', 'message': 'Publicado no Instagram'}), 200
            else:
                logger.warning("‚ö†Ô∏è Falha na publica√ß√£o, mas webhook recebido")
                return jsonify({'status': 'success', 'message': 'Recebido - publica√ß√£o falhou'}), 200
        else:
            logger.warning("‚ö†Ô∏è Dados incompletos recebidos")
            return jsonify({'status': 'success', 'message': 'Recebido - dados incompletos'}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erro no webhook: {str(e)}")
        return jsonify({'status': 'success', 'message': 'Recebido'}), 200

@app.route('/testar-instagram')
def testar_instagram():
    """Testa a conex√£o com a API do Instagram"""
    try:
        test_url = f"https://graph.facebook.com/v18.0/{INSTAGRAM_BUSINESS_ACCOUNT_ID}?fields=name&access_token={INSTAGRAM_ACCESS_TOKEN}"
        response = requests.get(test_url, timeout=10)
        
        if response.status_code == 200:
            return f"‚úÖ CONEX√ÉO OK! Conta: {response.json().get('name', 'Nome n√£o dispon√≠vel')}"
        else:
            return f"‚ùå ERRO: {response.json()}"
            
    except Exception as e:
        return f"‚ùå FALHA: {str(e)}"

@app.route('/testar-publicacao')
def testar_publicacao():
    """Testa uma publica√ß√£o agora mesmo"""
    sucesso = publicar_no_instagram(
        "‚úÖ TESTE: Sistema Boca no Trombone funcionando!",
        "https://jornalvozdolitoral.com/wp-content/uploads/2025/08/image-59.png",
        "TESTE"
    )
    
    if sucesso:
        return "‚úÖ PUBLICA√á√ÉO REALIZADA!", 200
    else:
        return "‚ùå Falha na publica√ß√£o. Verifique logs.", 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info("üöÄ SISTEMA INICIADO - PUBLICA√á√ÉO DIRETA!")
    app.run(host='0.0.0.0', port=port, debug=False)
